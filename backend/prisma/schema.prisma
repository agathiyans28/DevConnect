// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  profilePicture String? // Cloudinary image URL
  bio            String?
  skills         String[] // Array of skills
  githubLink     String?
  createdAt      DateTime @default(now())
  refreshToken   String? // Store refresh token

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follower[]     @relation("UserFollowers")
  following        Follower[]     @relation("UserFollowing")
  chats            Chat[]  @relation("UserChats")
  messages         Message[]
  notifications    Notification[]
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  imageUrl  String?  // Stores post image URL
  createdAt DateTime @default(now())

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId]) // Prevent duplicate follows
}

model Follower {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Chat {
  id        String   @id @default(uuid())
  users     User[]    @relation("UserChats") // Many-to-Many (NO `references`)
  messages  Message[]
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // e.g., "like", "comment", "follow"
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
